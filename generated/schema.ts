// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CryptoPunksAssigned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CryptoPunksAssigned entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunksAssigned entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunksAssigned", id.toString(), this);
  }

  static load(id: string): CryptoPunksAssigned | null {
    return store.get("CryptoPunksAssigned", id) as CryptoPunksAssigned | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assignedTo(): Bytes {
    let value = this.get("assignedTo");
    return value.toBytes();
  }

  set assignedTo(value: Bytes) {
    this.set("assignedTo", Value.fromBytes(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get punksRemainingToAssign(): BigInt {
    let value = this.get("punksRemainingToAssign");
    return value.toBigInt();
  }

  set punksRemainingToAssign(value: BigInt) {
    this.set("punksRemainingToAssign", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class cTokenTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save cTokenTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save cTokenTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("cTokenTransfer", id.toString(), this);
  }

  static load(id: string): cTokenTransfer | null {
    return store.get("cTokenTransfer", id) as cTokenTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amountTransfered(): BigInt {
    let value = this.get("amountTransfered");
    return value.toBigInt();
  }

  set amountTransfered(value: BigInt) {
    this.set("amountTransfered", Value.fromBigInt(value));
  }

  get allPunksAssigned(): boolean {
    let value = this.get("allPunksAssigned");
    return value.toBoolean();
  }

  set allPunksAssigned(value: boolean) {
    this.set("allPunksAssigned", Value.fromBoolean(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get imageHash(): string {
    let value = this.get("imageHash");
    return value.toString();
  }

  set imageHash(value: string) {
    this.set("imageHash", Value.fromString(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class CryptoPunkTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CryptoPunkTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunkTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunkTransfer", id.toString(), this);
  }

  static load(id: string): CryptoPunkTransfer | null {
    return store.get("CryptoPunkTransfer", id) as CryptoPunkTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class CryptoPunkOffered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CryptoPunkOffered entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunkOffered entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunkOffered", id.toString(), this);
  }

  static load(id: string): CryptoPunkOffered | null {
    return store.get("CryptoPunkOffered", id) as CryptoPunkOffered | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get offeredTo(): Bytes {
    let value = this.get("offeredTo");
    return value.toBytes();
  }

  set offeredTo(value: Bytes) {
    this.set("offeredTo", Value.fromBytes(value));
  }

  get minimumAmount(): BigInt {
    let value = this.get("minimumAmount");
    return value.toBigInt();
  }

  set minimumAmount(value: BigInt) {
    this.set("minimumAmount", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class CryptoPunkBidsEntered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CryptoPunkBidsEntered entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunkBidsEntered entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunkBidsEntered", id.toString(), this);
  }

  static load(id: string): CryptoPunkBidsEntered | null {
    return store.get(
      "CryptoPunkBidsEntered",
      id
    ) as CryptoPunkBidsEntered | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    return value.toBytes();
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }

  get amountBidded(): BigInt {
    let value = this.get("amountBidded");
    return value.toBigInt();
  }

  set amountBidded(value: BigInt) {
    this.set("amountBidded", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class CryptoPunkBidsWithdrawn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CryptoPunkBidsWithdrawn entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunkBidsWithdrawn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunkBidsWithdrawn", id.toString(), this);
  }

  static load(id: string): CryptoPunkBidsWithdrawn | null {
    return store.get(
      "CryptoPunkBidsWithdrawn",
      id
    ) as CryptoPunkBidsWithdrawn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get withdrawnFrom(): Bytes {
    let value = this.get("withdrawnFrom");
    return value.toBytes();
  }

  set withdrawnFrom(value: Bytes) {
    this.set("withdrawnFrom", Value.fromBytes(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get amountWithdrawn(): BigInt {
    let value = this.get("amountWithdrawn");
    return value.toBigInt();
  }

  set amountWithdrawn(value: BigInt) {
    this.set("amountWithdrawn", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class CryptoPunkNotForSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CryptoPunkNotForSale entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunkNotForSale entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunkNotForSale", id.toString(), this);
  }

  static load(id: string): CryptoPunkNotForSale | null {
    return store.get("CryptoPunkNotForSale", id) as CryptoPunkNotForSale | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class CryptoPunkBought extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CryptoPunkBought entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CryptoPunkBought entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CryptoPunkBought", id.toString(), this);
  }

  static load(id: string): CryptoPunkBought | null {
    return store.get("CryptoPunkBought", id) as CryptoPunkBought | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get punkIndex(): BigInt {
    let value = this.get("punkIndex");
    return value.toBigInt();
  }

  set punkIndex(value: BigInt) {
    this.set("punkIndex", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}
