enum Type {
  male
  female
  alien
  zombie
  ape
}

# enum Accessory {
#   3d glasses
#   bandana
#   beanie
#   big beard
#   big shades
#   black lipstick
#   blonde bob
#   blonde short
#   blue eye shadow
#   buck teeth
#   cap forward
#   cap
#   chinstrap
#   choker
#   cigarette
#   classic shades
#   clown eyes blue
#   clown eyes green
#   clown hair green
#   clown nose
#   cowboy hat
#   crazy hair
#   dark hair
#   do-rag
#   earring
#   eye mask
#   eye patch
#   fedora
#   front beard dark
#   front beard
#   frown
#   frumpy hair
#   goat
#   gold chain
#   green eye shadow
#   half shaved
#   handlebars
#   headband
#   hoodie
#   horned rim glasses
#   hot lipstick
#   knitted cap
#   luxurious beard
#   medical mask
#   messy hair
#   mohawk dark
#   mohawk thin
#   mohawk
#   mole
#   mustache
#   muttonchops
#   nerd glasses
#   normal beard black
#   normal beard
#   orange side
#   peak spike
#   pigtails
#   pilot helmet
#   pink with hat
#   pipe
#   police cap
#   purple eye shadow
#   purple hair
#   purple lipstick
#   red mohawk
#   regular shades
#   rosy cheeks
#   shadow beard
#   shaved head
#   silver chain
#   small shades
#   smile
#   spots
#   straight hair blonde
#   straight hair dark
#   straight hair
#   stringy hair
#   tassle hat
#   tiara
#   top hat
#   vampire hair
#   vape
#   vr
#   welding goggles
#   wild blonde
#   wild hair
#   wild white hair
# }

type Account @entity {
  "Ethereum Address"
  id: ID!

  "Nft data"
  nft: Nft

  "All Nfts owned by Account"
  nftsOwned: [Nft!] @derivedFrom(field: "account")

  "Purchases by Account"
  nftsBought: [SaleEvent!]! @derivedFrom(field: "buyer")

  "Nfts assigned to account (if any)"
  nftsAssigned: [AssignEvent!]! @derivedFrom(field: "assignedTo")

  "Nft transfer by Account"
  nftsTransfered: [NftTransferEvent!]! @derivedFrom(field: "ownedBy")

  "Query Bids to Account or by Account"
  nftBids: [BidEvent!]! @derivedFrom(field: "account")

  "Nfts offered for sale by Account"
  nftsOfferedForSale: [OfferEvent]! @derivedFrom(field: "offeredBy")

  "cToken transfers by Account"
  cTokenTransfered: [cTokenTransferEvent!]! @derivedFrom(field: "ownedBy")

  "Account "
  transaction: [Transaction!]! @derivedFrom(field: "account")
}

type Nft @entity {
  "Nft"
  id: ID!

  "Nft account"
  account: Account!

  "Nft holder"
  transferedTo: Account

  "Assigned"
  assignedTo: Account

  "Nft buyer"
  purchasedBy: Account

  "Bid for Nft"
  bid: [BidEvent!] @derivedFrom(field: "nft")

  "Offer for nft"
  offer: [OfferEvent!]! @derivedFrom(field: "nftOfferedForSale")

  "Sale events of nft"
  saleEvents: [SaleEvent!]! @derivedFrom(field: "nft")

  "Nft transfer"
  nftTransfer: [NftTransferEvent!]! @derivedFrom(field: "nft")

  "Transaction data"
  transaction: [Transaction!]! @derivedFrom(field: "nft")

  "Traits"
  type: Type
  accessories: [String!]!
}

type cToken @entity {
  "Account"
  id: ID! #Used transferedTo address from cTokenTransferEvent as ID

  contract: Contract

  "cToken Transfer data"
  transfers: [cTokenTransferEvent!]! @derivedFrom(field: "ctoken")

  "Transaction date"
  transaction: [Transaction!]! @derivedFrom(field: "ctoken")
}

type Contract @entity {
  id: ID!

  "Token Symbol"
  symbol: String

  "Token name"
  name: String

  "Contract Address"
  address: Bytes

  "Total supply of Nft tokens"
  totalSupply: BigInt

  "The hash of the composite image of all the Nfts"
  imageHash: String
  
  "True/False if all Nfts have been assigned"
  allNftsAssigned: Boolean
}

type AssignEvent @entity {
  "Nft"
  id: ID!

  "Account"
  assignedTo: Account!

  "Nft assigned"
  nft: Nft

  "Nfts remaining to assign"
  nftsRemainingToAssign: BigInt!

  "Transaction data"
  transaction: Transaction
}

type SaleEvent @entity {
  "Nft"
  id: ID!

  "Account"
  buyer: Account #Used the buyer address below as account ID
  "Nft purchased"
  nft: Nft

  "amount in ETH"
  amount: BigInt!

  "Seller"
  seller: Bytes!

  "Transaction data"
  transaction: Transaction
}

type OfferEvent @entity {
  "Nft Index"
  id: ID!

  "Offer by Account"
  offeredBy: Account!

  "Nft being offered for Sale"
  nftOfferedForSale: Nft

  "Amount offered"
  amountOffered: BigInt

  "Transaction data"
  transaction: Transaction
}

type BidEvent @entity {
  "Nft"
  id: ID!

  "Account of nft bidded"
  account: Account

  "nft bidded"
  nft: Nft

  "Bids Withdrawn"
  bidWithdrawn: WithdrawnBid

  "Address of Bidder"
  bidder: Bytes

  "Amount bidded"
  bid: BigInt

  "Transaction data"
  transaction: Transaction
}

type WithdrawnBid @entity {
  "Nft"
  id: ID!

  "Account"
  withdrawnBy: Account #Used withdrawnFrom address in Withdrawn as account ID
  "Nft data"
  nft: Nft

  "Amount withdrawn"
  amountWithdrawn: BigInt

  "Bid withdrawn"
  bid: BidEvent

  "Transaction data"
  transaction: Transaction
}

type NotForSaleEvent @entity {
  "Nft"
  id: ID!

  "nft"
  nft: BigInt!

  "Transaction data"
  transaction: Transaction
}

type cTokenTransferEvent @entity {
  "Account"
  id: ID! #Used transferedTo address below as ID
  "Address of Receiver as Account ID"
  ownedBy: Account

  "cToken data"
  ctoken: cToken #Used transferedTo address as cToken account ID
  
  "Nft data"
  nft: Nft

  "Sender"
  transferedFrom: Bytes!

  "Receiver"
  transferedTo: Bytes!

  "Amount of nft transfered"
  amountTransfered: BigInt!

  "Transaction data"
  transaction: Transaction
}

type NftTransferEvent @entity {
  "Nft"
  id: ID!

  "Account"
  ownedBy: Account #Used receiver address as Account ID

  "Sender"
  sender: Bytes

  "Receiver"
  receiver: Bytes

  "Nft transfered"
  nft: Nft

  "Transaction data"
  transaction: Transaction
}

type Transaction @entity {
  "Transaction Hash"
  id: ID!

  "Account "
  account: Account

  "cToken Transaction data"
  ctoken: cToken

  "NftTransfer "
  nftTransfers: NftTransferEvent

  notForSale: NotForSaleEvent

  "Nft "
  nft: Nft

  "Assign "
  assigned: AssignEvent

  "Offer "
  offer: OfferEvent

  "Bid "
  bid: BidEvent

  "Transaction date"
  date: BigInt!

  "Transaction block"
  block: BigInt!
}
