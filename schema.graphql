enum PunkType {
  male
  female
  alien
  zombie
  ape
}

enum EventType{
  ASSIGN
  TRANSFER
  ASK_CREATED
  ASK_REMOVED
  BID_CREATED
  BID_REMOVED
  SALE
}

enum OfferType{
  BID 
  ASK
}

# enum Accessory {
#   3d glasses
#   bandana
#   beanie
#   big beard
#   big shades
#   black lipstick
#   blonde bob
#   blonde short
#   blue eye shadow
#   buck teeth
#   cap forward
#   cap
#   chinstrap
#   choker
#   cigarette
#   classic shades
#   clown eyes blue
#   clown eyes green
#   clown hair green
#   clown nose
#   cowboy hat
#   crazy hair
#   dark hair
#   do-rag
#   earring
#   eye mask
#   eye patch
#   fedora
#   front beard dark
#   front beard
#   frown
#   frumpy hair
#   goat
#   gold chain
#   green eye shadow
#   half shaved
#   handlebars
#   headband
#   hoodie
#   horned rim glasses
#   hot lipstick
#   knitted cap
#   luxurious beard
#   medical mask
#   messy hair
#   mohawk dark
#   mohawk thin
#   mohawk
#   mole
#   mustache
#   muttonchops
#   nerd glasses
#   normal beard black
#   normal beard
#   orange side
#   peak spike
#   pigtails
#   pilot helmet
#   pink with hat
#   pipe
#   police cap
#   purple eye shadow
#   purple hair
#   purple lipstick
#   red mohawk
#   regular shades
#   rosy cheeks
#   shadow beard
#   shaved head
#   silver chain
#   small shades
#   smile
#   spots
#   straight hair blonde
#   straight hair dark
#   straight hair
#   stringy hair
#   tassle hat
#   tiara
#   top hat
#   vampire hair
#   vape
#   vr
#   welding goggles
#   wild blonde
#   wild hair
#   wild white hair
# }

type Account @entity {
  "Ethereum Address"
  id: ID!

  "All Punks owned by Account"
  punksOwned: [Punk!] @derivedFrom(field: "account")

  "All Wrapped Punks owned by Account"
  wrappedPunksOwned: [WrappedPunk!] @derivedFrom(field: "account")

  "Purchases by Account"
  bought: [Sale!]! @derivedFrom(field: "to")

  nftsOwned: [NFT!]! @derivedFrom(field: "owner")
  "Punks assigned to account (if any)"
  assigned: [Assign!]! @derivedFrom(field: "to")

  "Punk transfer by Account"
  sent: [Transfer!]! @derivedFrom(field: "from")

  received: [Transfer!]! @derivedFrom(field: "to")

  "Query Bids to Account or by Account"
  bids: [Bid!]! @derivedFrom(field: "from")

  "Punks offered for sale by Account"
  asks: [Ask!]! @derivedFrom(field: "from")

}

type Punk implements NFT @entity{
  "Punk"
  id: ID!

  "Punk account"
  account: Account

  "Punk holder"
  transferedTo: Account

  "Assigned"
  assignedTo: Account

  "Punk buyer"
  purchasedBy: Account

  punk: Punk!

  wrappedPunk: WrappedPunk!

}

interface Offer{
  id: ID!
  from: Account!
  open: Boolean!
  nft: NFT!
  created: Event!
  removed: Event
  offerType: OfferType!
}

type Ask implements Offer @entity{
  id: ID!
  from: Account!
  open: Boolean!
  nft: NFT!
  created: AskCreated!
  removed: AskRemoved
  offerType: OfferType!
}

type Bid implements Offer @entity{
  id: ID!
  from: Account!
  open: Boolean!
  nft: NFT!
  created: BidCreated!
  removed: BidRemoved
  offerType: OfferType!
}

interface NFT{
  id: ID! 
  uri: String! 
  contract: Contract! 
  tokenId: BigInt! 
  owner: Account! 
  events: [Event!]! @derivedFrom(field: "nft") 
   "Traits"
  type: PunkType
  accessories: [String!]
}

interface Event {
  id: ID!
  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
  from: Account
  to: Account
  amount: BigInt
}

type Contract @entity {
  id: ID!

  "Token Symbol"
  symbol: String

  "Token name"
  name: String

  "Contract Address"
  address: Bytes

  "Total supply of Punk tokens"
  totalSupply: BigInt

  "The hash of the composite image of all the Punks"
  imageHash: String
  
  "True/False if all Punks have been assigned"
  allPunksAssigned: Boolean
}

type Assign implements Event @entity {
  "Punk"
  id: ID!

  "Punks remaining to assign"
  punksRemainingToAssign: BigInt!


  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType
  to: Account!
}

type Sale implements Event @entity {
  "Punk"
  id: ID!

  "Account"
  to: Account!

  "amount in ETH"
  amount: BigInt!

  "Seller"
  from: Account!

  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType

}

type AskCreated implements Event @entity {
  "Punk Index"
  id: ID!

  "AskedBy Account"
  from: Account!

  "Amount offered"
  amount: BigInt!

  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType

}

type BidCreated implements Event@entity {
  "Punk"
  id: ID!

  "Address of Bidder"
  from: Account!

  "Amount bidded"
  amount: BigInt!
  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType
}

type BidRemoved implements Event @entity {
  "Punk"
  id: ID!

  "RemovedBy"
  from: Account! #Used withdrawnFrom address in Withdrawn as account ID

  "Bid withdrawn"
  bid: BidCreated!

  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType
}

type AskRemoved implements Event @entity {
  "Punk"
  id: ID!
  from: Account!
  ask: AskCreated!

  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType
}

type Transfer implements Event @entity {
  "Punk"
  id: ID!

  "Sender"
  from: Account

  "Receiver"
  to: Account!

  contract: Contract!
  nft: NFT!
  blockNumber: BigInt!
  blockHhash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType


}

type WrappedPunk implements NFT @entity{
  id: ID!
  punk: Punk!
  wrappedPunk: WrappedPunk!
  "Punk account"
  account: Account!
  
}

