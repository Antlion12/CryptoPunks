enum TraitType {
  TYPE
  ACCESSORY
}

enum EventType {
  ASSIGN
  TRANSFER
  ASK_CREATED
  ASK_REMOVED
  BID_CREATED
  BID_REMOVED
  SALE
  WRAP
  UNWRAP
}

enum OfferType {
  BID
  ASK
}

interface NFT {
  id: ID!
  contract: Contract
  tokenId: BigInt!
  owner: Account!
  events: [Event!]! @derivedFrom(field: "nft")
  currentAsk: Ask
  currentBid: Bid
}

interface Event {
  id: ID!
  contract: Contract
  nft: NFT #nullable because punk doesn't appear in all events
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
  from: Account
  to: Account
  amount: BigInt
}

type Account @entity {
  "Ethereum Address"
  id: ID!

  "All Punks owned by Account"
  punksOwned: [Punk!] @derivedFrom(field: "owner")

  "Purchases by Account"
  bought: [Sale!]! @derivedFrom(field: "to")

  "All Punks owned by Account"
  nftsOwned: [NFT!]! @derivedFrom(field: "owner")

  "Punks assigned to account (if any)"
  assigned: [Assign!]! @derivedFrom(field: "to")

  "Punk transfer by Account"
  sent: [Transfer!]! @derivedFrom(field: "from")

  received: [Transfer!]! @derivedFrom(field: "to")

  "Query bids to Account or by Account"
  bids: [Bid!]! @derivedFrom(field: "from")

  "Punks offered for sale by Account"
  asks: [Ask!]! @derivedFrom(field: "from")

  numberOfPunksOwned: BigInt!
}

type Punk implements NFT @entity {
  "Punk ID"
  id: ID!
  transferedTo: Account
  "Account that claimed Punk"
  assignedTo: Account
  "Punk buyers"
  purchasedBy: Account
  "Punk metadata"
  metadata: MetaData
  "Contract data"
  contract: Contract
  "Punk tokenId"
  tokenId: BigInt!
  "Current owner of Punk"
  owner: Account!
  "Wrap Status"
  wrapped: Boolean!
  "All Punk events"
  events: [Event!]! @derivedFrom(field: "nft")
  "Current Ask for Punk"
  currentAsk: Ask
  "Current Bid for Punk"
  currentBid: Bid
  "Current AskCreated event"
  currentAskCreated: AskCreated
  "Current BidCreated event"
  currentBidCreated: BidCreated
  "Current AskRemoved event"
  currentAskRemoved: AskRemoved
  "Current BidRemoved event"
  currentBidRemoved: BidRemoved
}

type MetaData @entity(immutable: true) {
  id: ID!
  tokenId: BigInt!
  "URI of Punk"
  tokenURI: String!
  "Punk image"
  imageURI: String!
  "Contract URI"
  contractURI: String!
  punk: Punk!
  "Punk Traits"
  traits: [Trait!]!
}

type Trait @entity {
  id: ID!
  type: TraitType!
  metaDatas: [MetaData!]! @derivedFrom(field: "traits")
  numberOfNfts: BigInt!
}

interface Offer {
  id: ID!
  from: Account!
  "Open Status of Punk. Asks/Bids can be either Open or Closed"
  open: Boolean!
  "Bid/Ask for Punk in ETH"
  amount: BigInt!
  "Punk being offered/bidded"
  nft: NFT
  "Created at. Could be ASK or BID"
  created: Event
  "Removed at. Could be ASK or BID"
  removed: Event
  offerType: OfferType!
}

type Ask implements Offer @entity {
  id: ID!
  from: Account!
  open: Boolean!
  amount: BigInt!
  nft: NFT
  created: Event
  removed: Event
  offerType: OfferType!
}

type Bid implements Offer @entity {
  id: ID!
  from: Account!
  open: Boolean!
  amount: BigInt!
  nft: NFT
  created: Event
  removed: Event
  offerType: OfferType!
}

type Contract @entity {
  "Contract Address"
  id: ID!
  "Token Symbol"
  symbol: String
  "Token name"
  name: String
  "Total supply of tokens"
  totalSupply: BigInt!
  "Total number of Punk sales"
  totalSales: BigInt!
  "Total Sales in ETH for Punks"
  totalAmountTraded: BigInt!
  "The hash of the composite image of all the Punks"
  imageHash: String
}

type Assign implements Event @entity(immutable: true) {
  id: ID!
  contract: Contract
  nft: NFT
  to: Account
  amount: BigInt
  from: Account
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type Sale implements Event @entity(immutable: true) {
  id: ID!
  to: Account
  amount: BigInt
  from: Account
  contract: Contract
  nft: NFT
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type AskCreated implements Event @entity(immutable: true) {
  id: ID!
  from: Account
  to: Account
  ask: Ask!
  amount: BigInt
  contract: Contract
  nft: NFT
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type BidCreated implements Event @entity(immutable: true) {
  id: ID!
  from: Account
  to: Account
  bid: Bid!
  amount: BigInt
  contract: Contract
  nft: NFT
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type BidRemoved implements Event @entity(immutable: true) {
  id: ID!
  from: Account
  to: Account
  amount: BigInt
  bid: Bid!
  contract: Contract
  nft: NFT
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type AskRemoved implements Event @entity(immutable: true) {
  id: ID!
  ask: Ask!
  from: Account
  to: Account
  amount: BigInt
  contract: Contract
  nft: NFT
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type Transfer implements Event @entity(immutable: true) {
  id: ID!
  from: Account
  to: Account
  amount: BigInt
  contract: Contract
  nft: NFT
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type CToken
  @entity { #TransferEvents
  "TxHash + LogIndex" #This ID/Entity is used for referencing events in the same transaction
  id: ID!
  "Receipent"
  from: Account!
  "Sender"
  to: Account!
  "New owner of Punk"
  owner: String!
  "Amount of cToken transferred"
  amount: BigInt
  referenceId: String!
  "//Transaction Details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}

type Wrap implements Event @entity(immutable: true) {
  id: ID!
  from: Account
  to: Account
  amount: BigInt
  contract: Contract
  nft: NFT
  "//Transaction details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type Unwrap implements Event @entity(immutable: true) {
  id: ID!
  from: Account
  to: Account
  amount: BigInt
  contract: Contract
  nft: NFT
  "//Transaction details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
  type: EventType!
}

type UserProxy @entity {
  "Contract Address of UserProxy"
  id: ID!
  "Account that owns the Proxy"
  user: Account!
  "//Transaction details"
  blockNumber: BigInt!
  blockHash: Bytes!
  txHash: Bytes!
  timestamp: BigInt!
}
